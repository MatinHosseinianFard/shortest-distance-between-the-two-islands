def solve(mat):
    row = len(mat)
    col = len(mat[0])

    def dfs(i, j, seen):
        if (i, j) in seen or mat[i][j] == 0:
            return
        seen.add((i, j))
        if i - 1 >= 0:
            dfs(i - 1, j, seen)
        if i + 1 < row:
            dfs(i + 1, j, seen)
        if j - 1 >= 0:
            dfs(i, j - 1, seen)
        if j + 1 < col:
            dfs(i, j + 1, seen)

    visited = set()
    for i in range(row):
        if len(visited) > 0:
            break
        for j in range(col):
            if mat[i][j] == 1:
                dfs(i, j, visited)
                break
    q = []
    for land in visited:
        i, j = land
        if i - 1 >= 0 and mat[i - 1][j] == 0:
            q.append((i - 1, j, 1, i, j))
        if i + 1 < row and mat[i + 1][j] == 0:
            q.append((i + 1, j, 1, i, j))
        if j - 1 >= 0 and mat[i][j - 1] == 0:
            q.append((i, j - 1, 1, i, j))
        if j + 1 < col and mat[i][j + 1] == 0:
            q.append((i, j + 1, 1, i, j))

    while len(q) > 0:
        i, j, dist, z, x = q.pop(0)
        if (i, j) in visited:
            continue
        visited.add((i, j))
        if mat[i][j] == 1:
            resault = [(z,x), (i,j), dist-1]
            return resault
        if i - 1 >= 0:
            q.append((i - 1, j, dist + 1, z, x))
        if i + 1 < row:
            q.append((i + 1, j, dist + 1, z, x))
        if j - 1 >= 0:
            q.append((i, j - 1, dist + 1, z, x))
        if j + 1 < col:
            q.append((i, j + 1, dist + 1, z, x))


# matrix = [
#     [1, 0, 0],
#     [1, 0, 1],
#     [0, 0, 1],
# ]

matrix = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
]
# matrix = [
#     [0, 0, 0, 1],
#     [0, 0, 0, 0],
#     [0, 0, 0, 0],
#     [1, 0, 0, 0],
# ]
# matrix = [[1, 1, 0],
#           [0, 0, 0],
#           [0, 0, 1]]



a = solve(matrix)


size(500,500)
fill(127, 0, 0)
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j] == 1:
            ellipse((j + 10) * 15, (i + 5) * 15, 7, 7)
            
line((a[0][1]+10) * 15, (a[0][0]+5) * 15, (a[1][1]+10) * 15, (a[1][0]+5) * 15)
font = createFont("Arial",16)
textFont(font,16)
fill(0)
az = "az deraye : " + str(a[0])
ta = "ta deraye : " + str(a[1])
distance = "distance : " + str(a[2])
text(az,10,20)
text(ta,10,40)                
text(distance,10,60)
